package ch.bbw.em;/* * Class Room - a room in an adventure game. * * Author:  Michael Kolling * Version: 1.1 * Date:    August 2000 * * This class is part of Zork. Zork is a simple, text based adventure game. * * "Room" represents one location in the scenery of the game.  It is * connected to at most four other rooms via exits.  The exits are labelled * north, east, south, west.  For each direction, the room stores a reference * to the neighbouring room, or null if there is no exit in that direction. */import java.util.HashMap;import java.util.Set;public class Room {    private String description, name;    private HashMap exits; // stores exits of this room.    private Item item;    private Entity mob;    /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a kitchen" or "an open court yard".     */    public Room(String description, Item item, Entity mob, String name) {        this.description = description;        this.name = name;        this.exits = new HashMap();        this.item = item;        this.mob = mob;    }    /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     */    public void setExits(Room north, Room east, Room south, Room west) {        if (north != null) {            exits.put("north", north);        }        if (east != null) {            exits.put("east", east);        }        if (south != null) {            exits.put("south", south);        }        if (west != null) {            exits.put("west", west);        }    }    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String shortDescription() {        return description;    }    /**     * Return a long description of this room, on the form:     * You are in the kitchen.     * Exits: north west     */    public String longDescription() {        if (getMob() == null && getItem() == null) {            return "You are in: " + getName() + "\n\tItem: None\n\tMob: None\n\t" + exitString();        } else if (getMob() == null) {            return "You are in: " + getName() + "\n\tItem: " + getItem().getName() + "\n\tMob: None\n\t" + exitString();        } else if (getItem() == null) {            return "You are in: " + getName() + "\n\tItem: None\n\tMob: " + getMob().getName() + " lvl: " + getMob().getLvl() + "\n\t" + exitString();        }        return "You are in: " + getName() + "\n\tItem: " + getItem().getName() + "\n\tMob: " + getMob().getName() + " Lvl: " + getMob().getLvl() + "\n\t" + exitString();    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west ".     */    private String exitString() {        StringBuilder returnString = new StringBuilder("Exits:");        Set keys = exits.keySet();        for (Object key : keys) returnString.append(" ").append(key);        return returnString.toString();    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room nextRoom(String direction) {        return (Room) exits.get(direction);    }    public Item getItem() {        return item;    }    public void setItem(Item item) {        this.item = item;    }    public Entity getMob() {        return mob;    }    public void setMob(Entity mob) {        this.mob = mob;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}